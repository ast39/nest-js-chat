services:
  postgres:
    image: postgres:14-alpine
    container_name: "${POSTGRES_CONTAINER}"
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"
    ports:
      - "${OUTER_POSTGRES_PORT}:${POSTGRES_PORT}"
    volumes:
      - pg_data_14a:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 2s
      timeout: 2s
      retries: 3

  api:
    container_name: "${API_CONTAINER}"
    restart: always
    build:
      dockerfile: Dockerfile
    ports:
      - "${OUTER_APP_PORT}:${APP_PORT}"
      - "${SOCKET_PORT}:${SOCKET_PORT}"
    env_file:
      - .env
    environment:
      NODE_ENV: development
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}?schema=public"
    networks:
      - app-network
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .:/app
      - /app/node_modules

volumes:
  pg_data_14a: {}

networks:
  app-network:
    driver: bridge